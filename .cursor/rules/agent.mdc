---
description: 
globs: 
alwaysApply: true
---
Prompt « spec » pour générer l’agent LangChain

🎯 Objectif

Construis un agent autonome (approche ReAct) capable de lire un dossier d’appel d’offres (AO) brut, d’en extraire l’essentiel puis de décider Go / NoGo.
Livrables attendus :
	1.	Résumé détaillé : besoins, contraintes, délais, critères de notation.
	2.	Recommandation Go / NoGo (argumentée).
	3.	Ébauche de plan de réponse (plan structuré : compréhension / proposition / planning / budget).
	4.	Synthèse “manager” (1 page, claire, prête à copier-coller).

🧰 Outils disponibles

Nom du wrapper	Signature	Rôle
read_documents_from_folder(folder_path: str) -> dict	Retourne :• text : concat brut (✂︎ 4 000 car. max/fichier)• long_files : liste {filepath, length} pour les fichiers tronqués	Import initial du dossier AO
read_more_from_file(filepath: str, offset: int = 4000, max_chars: int = 4000) -> str	Lit la suite d’un fichier long, par tranches	Exploration incrémentale
query_rag(question: str) -> Any	Recherche RAG dans l’historique d’AO (anciens Go/NoGo)	Enrichir l’analyse

⚙️ Contraintes & bonnes pratiques
	•	Modèle : ChatMistralAI
	•	Utiliser la clé API en var d'env : MISTRAL_API_KEY
	•	Mémoire courte : ne garde que les 4 derniers messages pour ne pas dépasser ~16 k tokens.
	•	Limiter le contexte :
	•	Max 2 000 car. envoyés au modèle au total lors du “résumé initial”.
	•	Si long_files non vide, utiliser read_more_from_file en boucle (ReAct) plutôt que tout charger d’un coup.
	•	Streaming / ReAct : réfléchir pas-à-pas → décider → appeler outil → stocker résultat → continuer.
	•	< 500 lignes : architecture modulaire (1 fichier) ; classes/fonctions courtes, pas de sur-ingénierie.
	•	Dépendances : langchain, mistralai, PyPDF2, python-docx, pandas, openpyxl, python-pptx. Rien de plus.
	•	Exécution locale : pas de cloud externe, pas de base vectorielle — juste les outils fournis.

📝 Format de sortie exigé (Markdown)

### Résumé des documents
...

### Points à explorer via RAG
- ...
- ...

### Résultats RAG
- **Point 1** : …
- **Point 2** : …

### Recommandation Go ou NO Go
> **GO** / **NO GO** because …  

### Plan de réponse
1. Compréhension du besoin  
2. Proposition technique / fonctionnelle  
3. Équipe & planning  
4. Proposition financière (si info dispo)

### Synthèse manager
**Besoin** : …  
**Décision** : GO / NO GO  
**Pourquoi** : 1) …  2) …  3) …  
**Next steps** : …

💡 Étapes internes recommandées (ordre indicatif)
	1.	Import initial : read_documents_from_folder → tronquer à 2 000 car. max.
	2.	Premier résumé pour lister les “Points à explorer via RAG”.
	3.	Boucle RAG : pour chaque point, query_rag, résumer, agréger.
	4.	Lecture incrémentale si des long_files semblent critiques (ReAct : décider, appeler read_more_from_file, résumer, boucler).
	5.	Synthèse finale : remplir les 5 blocs Markdown ci-dessus.

🔧 Conseils d’implémentation
	•	Fonction “print_agent_action” (optionnelle) : log console clair — utile pour le débogage.
	•	Tests : prévoir un dossier “sample_AO” avec 2-3 docs variés pour valider.