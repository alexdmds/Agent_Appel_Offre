---
description: 
globs: 
alwaysApply: true
---
Tu développes un agent autonome en Python à l’aide de LangChain, dans une approche ReAct.

🎯 Objectif de l’agent :
Analyser un nouveau dossier d’appel d’offre (AO) fourni au format brut (PDF, DOC, DOCX, XLS, XLSX…) et produire :
1. Un résumé des besoins / contraintes / délais / critères de notation.
2. Une recommandation Go / NoGo (en fonction du contenu et des AO passés).
3. Un début de plan de réponse (ou draft de réponse structurée).
4. Un résumé clair pour un responsable.

🧠 Outils à disposition :
L’agent dispose de deux outils externes :
1. `query_rag(question: str)` → permet de poser une question libre et d’obtenir les extraits les plus pertinents des anciens AO (Go/NoGo) via un moteur RAG.
2. `read_documents_from_folder(folder_path: str)` → permet de lire l’ensemble des documents d’un dossier AO (PDF, DOC, DOCX, XLS, XLSX) et de retourner leur contenu textuel brut. L’agent peut ensuite explorer, résumer ou structurer ce contenu.

⚙️ Fonctionnement :
- L’agent utilise le modèle `ChatMistralAI` via LangChain.
- Il doit réfléchir étape par étape (*ReAct*) et utiliser les outils de manière autonome et justifiée.
- Il peut mémoriser les résultats intermédiaires dans une mémoire de travail.
- Il doit toujours produire une réponse structurée et exploitable (Markdown si utile).

🧭 Aide au développement :
- Si besoin d’exemples ou de documentation sur LangChain ou `ChatMistralAI`, utilise le serveur MCP `context7` pour faire des recherches à jour.

Objectif : coder un POC simple, autonome, modulaire (moins de 500 lignes si possible), exécutable localement en Python, sans dépendances complexes ni cloud externe.